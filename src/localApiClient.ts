/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { LocalApiClientContext } from "./localApiClientContext";

class LocalApiClient extends LocalApiClientContext {
  /**
   * Initializes a new instance of the LocalApiClient class.
   * @param [options] The parameter options
   */
  constructor(options?: Models.LocalApiClientOptions) {
    super(options);
  }

  /**
   * @summary Get the possible values for base profile filtering. We can filter the available values.
   * With this we can see for example that what languages of profiles do we have for Windows profiles
   * with Chrome.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetBaseProfileSearchParametersResponse>
   */
  getBaseProfileSearchParameters(options?: Models.LocalApiClientGetBaseProfileSearchParametersOptionalParams): Promise<Models.GetBaseProfileSearchParametersResponse>;
  /**
   * @param callback The callback
   */
  getBaseProfileSearchParameters(callback: msRest.ServiceCallback<Models.BaseProfileSearchParameters>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getBaseProfileSearchParameters(options: Models.LocalApiClientGetBaseProfileSearchParametersOptionalParams, callback: msRest.ServiceCallback<Models.BaseProfileSearchParameters>): void;
  getBaseProfileSearchParameters(options?: Models.LocalApiClientGetBaseProfileSearchParametersOptionalParams | msRest.ServiceCallback<Models.BaseProfileSearchParameters>, callback?: msRest.ServiceCallback<Models.BaseProfileSearchParameters>): Promise<Models.GetBaseProfileSearchParametersResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getBaseProfileSearchParametersOperationSpec,
      callback) as Promise<Models.GetBaseProfileSearchParametersResponse>;
  }

  /**
   * @summary Filtering base profiles with some criteria. It will return X base profiles. It is not
   * an idempotent method. This means if you are calling it twice after each other it may return a
   * different set of base profiles.
   * @param [options] The optional parameters
   * @returns Promise<Models.SearchBaseProfilesResponse>
   */
  searchBaseProfiles(options?: Models.LocalApiClientSearchBaseProfilesOptionalParams): Promise<Models.SearchBaseProfilesResponse>;
  /**
   * @param callback The callback
   */
  searchBaseProfiles(callback: msRest.ServiceCallback<Models.BaseProfilePreview[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  searchBaseProfiles(options: Models.LocalApiClientSearchBaseProfilesOptionalParams, callback: msRest.ServiceCallback<Models.BaseProfilePreview[]>): void;
  searchBaseProfiles(options?: Models.LocalApiClientSearchBaseProfilesOptionalParams | msRest.ServiceCallback<Models.BaseProfilePreview[]>, callback?: msRest.ServiceCallback<Models.BaseProfilePreview[]>): Promise<Models.SearchBaseProfilesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      searchBaseProfilesOperationSpec,
      callback) as Promise<Models.SearchBaseProfilesResponse>;
  }

  /**
   * @summary Gets the list of the cookies of the profile.
   * @param guid The unique identifier of the profile
   * @param [options] The optional parameters
   * @returns Promise<Models.ListCookiesResponse>
   */
  listCookies(guid: string, options?: msRest.RequestOptionsBase): Promise<Models.ListCookiesResponse>;
  /**
   * @param guid The unique identifier of the profile
   * @param callback The callback
   */
  listCookies(guid: string, callback: msRest.ServiceCallback<Models.BrowserCookie[]>): void;
  /**
   * @param guid The unique identifier of the profile
   * @param options The optional parameters
   * @param callback The callback
   */
  listCookies(guid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BrowserCookie[]>): void;
  listCookies(guid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BrowserCookie[]>, callback?: msRest.ServiceCallback<Models.BrowserCookie[]>): Promise<Models.ListCookiesResponse> {
    return this.sendOperationRequest(
      {
        guid,
        options
      },
      listCookiesOperationSpec,
      callback) as Promise<Models.ListCookiesResponse>;
  }

  /**
   * @summary Adds a list of cookies to the profile. If cookies are already present for a domain,
   * they will be overwritten.
   * @param guid The unique identifier of the profile
   * @param [options] The optional parameters
   * @returns Promise<Models.AddCookiesResponse>
   */
  addCookies(guid: string, options?: Models.LocalApiClientAddCookiesOptionalParams): Promise<Models.AddCookiesResponse>;
  /**
   * @param guid The unique identifier of the profile
   * @param callback The callback
   */
  addCookies(guid: string, callback: msRest.ServiceCallback<Models.BrowserCookie[]>): void;
  /**
   * @param guid The unique identifier of the profile
   * @param options The optional parameters
   * @param callback The callback
   */
  addCookies(guid: string, options: Models.LocalApiClientAddCookiesOptionalParams, callback: msRest.ServiceCallback<Models.BrowserCookie[]>): void;
  addCookies(guid: string, options?: Models.LocalApiClientAddCookiesOptionalParams | msRest.ServiceCallback<Models.BrowserCookie[]>, callback?: msRest.ServiceCallback<Models.BrowserCookie[]>): Promise<Models.AddCookiesResponse> {
    return this.sendOperationRequest(
      {
        guid,
        options
      },
      addCookiesOperationSpec,
      callback) as Promise<Models.AddCookiesResponse>;
  }

  /**
   * @summary Deletes the cookies of the profile.
   * @param guid The unique identifier of the profile
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteCookies(guid: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param guid The unique identifier of the profile
   * @param callback The callback
   */
  deleteCookies(guid: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param guid The unique identifier of the profile
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCookies(guid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteCookies(guid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        guid,
        options
      },
      deleteCookiesOperationSpec,
      callback);
  }

  /**
   * @summary Health check request to test if Kameleo has been started and accepting connections.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  healthcheck(options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param callback The callback
   */
  healthcheck(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  healthcheck(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  healthcheck(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      healthcheckOperationSpec,
      callback);
  }

  /**
   * @summary Provides information about the user.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetUserInfoResponse>
   */
  getUserInfo(options?: msRest.RequestOptionsBase): Promise<Models.GetUserInfoResponse>;
  /**
   * @param callback The callback
   */
  getUserInfo(callback: msRest.ServiceCallback<Models.UserInfoResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getUserInfo(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.UserInfoResponse>): void;
  getUserInfo(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.UserInfoResponse>, callback?: msRest.ServiceCallback<Models.UserInfoResponse>): Promise<Models.GetUserInfoResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getUserInfoOperationSpec,
      callback) as Promise<Models.GetUserInfoResponse>;
  }

  /**
   * @summary Terminates the Kameleo session by deauthenticating and exiting the CLI. It is important
   * to call it after operating with Kameleo, so other users of the team account won't be logged out.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  terminateApplication(options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param callback The callback
   */
  terminateApplication(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  terminateApplication(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  terminateApplication(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      terminateApplicationOperationSpec,
      callback);
  }

  /**
   * @summary Gets a preview list about profiles that are currently in the system.
   * @param [options] The optional parameters
   * @returns Promise<Models.ListProfilesResponse>
   */
  listProfiles(options?: msRest.RequestOptionsBase): Promise<Models.ListProfilesResponse>;
  /**
   * @param callback The callback
   */
  listProfiles(callback: msRest.ServiceCallback<Models.ProfilePreview[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listProfiles(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProfilePreview[]>): void;
  listProfiles(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProfilePreview[]>, callback?: msRest.ServiceCallback<Models.ProfilePreview[]>): Promise<Models.ListProfilesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listProfilesOperationSpec,
      callback) as Promise<Models.ListProfilesResponse>;
  }

  /**
   * @summary Creates a new profile based on a selected BaseProfile and inputs.
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateProfileResponse>
   */
  createProfile(options?: Models.LocalApiClientCreateProfileOptionalParams): Promise<Models.CreateProfileResponse>;
  /**
   * @param callback The callback
   */
  createProfile(callback: msRest.ServiceCallback<Models.ProfileResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  createProfile(options: Models.LocalApiClientCreateProfileOptionalParams, callback: msRest.ServiceCallback<Models.ProfileResponse>): void;
  createProfile(options?: Models.LocalApiClientCreateProfileOptionalParams | msRest.ServiceCallback<Models.ProfileResponse>, callback?: msRest.ServiceCallback<Models.ProfileResponse>): Promise<Models.CreateProfileResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      createProfileOperationSpec,
      callback) as Promise<Models.CreateProfileResponse>;
  }

  /**
   * @summary Updates profile settings.
   * @param guid The unique identifier of the profile
   * @param [options] The optional parameters
   * @returns Promise<Models.UpdateProfileResponse>
   */
  updateProfile(guid: string, options?: Models.LocalApiClientUpdateProfileOptionalParams): Promise<Models.UpdateProfileResponse>;
  /**
   * @param guid The unique identifier of the profile
   * @param callback The callback
   */
  updateProfile(guid: string, callback: msRest.ServiceCallback<Models.ProfileResponse>): void;
  /**
   * @param guid The unique identifier of the profile
   * @param options The optional parameters
   * @param callback The callback
   */
  updateProfile(guid: string, options: Models.LocalApiClientUpdateProfileOptionalParams, callback: msRest.ServiceCallback<Models.ProfileResponse>): void;
  updateProfile(guid: string, options?: Models.LocalApiClientUpdateProfileOptionalParams | msRest.ServiceCallback<Models.ProfileResponse>, callback?: msRest.ServiceCallback<Models.ProfileResponse>): Promise<Models.UpdateProfileResponse> {
    return this.sendOperationRequest(
      {
        guid,
        options
      },
      updateProfileOperationSpec,
      callback) as Promise<Models.UpdateProfileResponse>;
  }

  /**
   * @summary Returns a profile from the system.
   * @param guid The unique identifier of the profile
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadProfileResponse>
   */
  readProfile(guid: string, options?: msRest.RequestOptionsBase): Promise<Models.ReadProfileResponse>;
  /**
   * @param guid The unique identifier of the profile
   * @param callback The callback
   */
  readProfile(guid: string, callback: msRest.ServiceCallback<Models.ProfileResponse>): void;
  /**
   * @param guid The unique identifier of the profile
   * @param options The optional parameters
   * @param callback The callback
   */
  readProfile(guid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProfileResponse>): void;
  readProfile(guid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProfileResponse>, callback?: msRest.ServiceCallback<Models.ProfileResponse>): Promise<Models.ReadProfileResponse> {
    return this.sendOperationRequest(
      {
        guid,
        options
      },
      readProfileOperationSpec,
      callback) as Promise<Models.ReadProfileResponse>;
  }

  /**
   * @summary Removes profile from the system. When you are launching and stopping a big number of
   * profiles for example for scraping it is recommended to call this after you have stopped the
   * profile. This will free up disk space.
   * @param guid The unique identifier of the profile
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteProfile(guid: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param guid The unique identifier of the profile
   * @param callback The callback
   */
  deleteProfile(guid: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param guid The unique identifier of the profile
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteProfile(guid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteProfile(guid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        guid,
        options
      },
      deleteProfileOperationSpec,
      callback);
  }

  /**
   * @summary Returns the current status of the profile.
   * @param guid The unique identifier of the profile
   * @param [options] The optional parameters
   * @returns Promise<Models.GetProfileStatusResponse>
   */
  getProfileStatus(guid: string, options?: msRest.RequestOptionsBase): Promise<Models.GetProfileStatusResponse>;
  /**
   * @param guid The unique identifier of the profile
   * @param callback The callback
   */
  getProfileStatus(guid: string, callback: msRest.ServiceCallback<Models.StatusResponse>): void;
  /**
   * @param guid The unique identifier of the profile
   * @param options The optional parameters
   * @param callback The callback
   */
  getProfileStatus(guid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StatusResponse>): void;
  getProfileStatus(guid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StatusResponse>, callback?: msRest.ServiceCallback<Models.StatusResponse>): Promise<Models.GetProfileStatusResponse> {
    return this.sendOperationRequest(
      {
        guid,
        options
      },
      getProfileStatusOperationSpec,
      callback) as Promise<Models.GetProfileStatusResponse>;
  }

  /**
   * @summary Starts a profile. The browser will be launched. In case of mobile profiles and external
   * launcher types the external spoofing engine will be launched.
   * If successful, the profile's lifetime state will be 'running'. Otherwise the profile's lifetime
   * state will be 'terminated'. During the api call the lifetime state can be 'starting' for a
   * temporarily.
   * @param guid The unique identifier of the profile
   * @param [options] The optional parameters
   * @returns Promise<Models.StartProfileResponse>
   */
  startProfile(guid: string, options?: msRest.RequestOptionsBase): Promise<Models.StartProfileResponse>;
  /**
   * @param guid The unique identifier of the profile
   * @param callback The callback
   */
  startProfile(guid: string, callback: msRest.ServiceCallback<Models.StatusResponse>): void;
  /**
   * @param guid The unique identifier of the profile
   * @param options The optional parameters
   * @param callback The callback
   */
  startProfile(guid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StatusResponse>): void;
  startProfile(guid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StatusResponse>, callback?: msRest.ServiceCallback<Models.StatusResponse>): Promise<Models.StartProfileResponse> {
    return this.sendOperationRequest(
      {
        guid,
        options
      },
      startProfileOperationSpec,
      callback) as Promise<Models.StartProfileResponse>;
  }

  /**
   * @summary Stops a profile. The browsers will be stopped. In case of mobile profiles and external
   * launcher types the external spoofing engine will be stopped.
   * If successful, the profile's lifetime state will be 'terminated'. Otherwise the profile's
   * lifetime state will be 'running'. During the api call the lifetime state can be 'terminating'
   * for a temporarily.
   * @param guid The unique identifier of the profile
   * @param [options] The optional parameters
   * @returns Promise<Models.StopProfileResponse>
   */
  stopProfile(guid: string, options?: msRest.RequestOptionsBase): Promise<Models.StopProfileResponse>;
  /**
   * @param guid The unique identifier of the profile
   * @param callback The callback
   */
  stopProfile(guid: string, callback: msRest.ServiceCallback<Models.StatusResponse>): void;
  /**
   * @param guid The unique identifier of the profile
   * @param options The optional parameters
   * @param callback The callback
   */
  stopProfile(guid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StatusResponse>): void;
  stopProfile(guid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StatusResponse>, callback?: msRest.ServiceCallback<Models.StatusResponse>): Promise<Models.StopProfileResponse> {
    return this.sendOperationRequest(
      {
        guid,
        options
      },
      stopProfileOperationSpec,
      callback) as Promise<Models.StopProfileResponse>;
  }

  /**
   * @summary Saves a profile to a file. It will create a .kameleo file to the required location. It
   * will store all the profile settings, browsing data, cookies, history, bookmarks, installed
   * extension / addons. Later it can be reloaded.
   * @param guid The unique identifier of the profile
   * @param [options] The optional parameters
   * @returns Promise<Models.SaveProfileResponse>
   */
  saveProfile(guid: string, options?: Models.LocalApiClientSaveProfileOptionalParams): Promise<Models.SaveProfileResponse>;
  /**
   * @param guid The unique identifier of the profile
   * @param callback The callback
   */
  saveProfile(guid: string, callback: msRest.ServiceCallback<Models.ProfileResponse>): void;
  /**
   * @param guid The unique identifier of the profile
   * @param options The optional parameters
   * @param callback The callback
   */
  saveProfile(guid: string, options: Models.LocalApiClientSaveProfileOptionalParams, callback: msRest.ServiceCallback<Models.ProfileResponse>): void;
  saveProfile(guid: string, options?: Models.LocalApiClientSaveProfileOptionalParams | msRest.ServiceCallback<Models.ProfileResponse>, callback?: msRest.ServiceCallback<Models.ProfileResponse>): Promise<Models.SaveProfileResponse> {
    return this.sendOperationRequest(
      {
        guid,
        options
      },
      saveProfileOperationSpec,
      callback) as Promise<Models.SaveProfileResponse>;
  }

  /**
   * @summary Loads a profile from a file. It will load the profile from a .kameleo file. It will
   * load all the profile settings, browsing data, cookies, history, bookmarks, installed extension /
   * addons.
   * @param [options] The optional parameters
   * @returns Promise<Models.LoadProfileResponse>
   */
  loadProfile(options?: Models.LocalApiClientLoadProfileOptionalParams): Promise<Models.LoadProfileResponse>;
  /**
   * @param callback The callback
   */
  loadProfile(callback: msRest.ServiceCallback<Models.ProfileResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  loadProfile(options: Models.LocalApiClientLoadProfileOptionalParams, callback: msRest.ServiceCallback<Models.ProfileResponse>): void;
  loadProfile(options?: Models.LocalApiClientLoadProfileOptionalParams | msRest.ServiceCallback<Models.ProfileResponse>, callback?: msRest.ServiceCallback<Models.ProfileResponse>): Promise<Models.LoadProfileResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      loadProfileOperationSpec,
      callback) as Promise<Models.LoadProfileResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getBaseProfileSearchParametersOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "base-profile-search-parameters",
  queryParameters: [
    Parameters.deviceType,
    Parameters.osFamily,
    Parameters.browserProduct,
    Parameters.language
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BaseProfileSearchParameters
    },
    default: {
      bodyMapper: Mappers.ProblemResponse
    }
  },
  serializer
};

const searchBaseProfilesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "base-profiles",
  queryParameters: [
    Parameters.deviceType,
    Parameters.osFamily,
    Parameters.browserProduct,
    Parameters.language
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BaseProfilePreview"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ProblemResponse
    }
  },
  serializer
};

const listCookiesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "profiles/{guid}/cookies",
  urlParameters: [
    Parameters.guid
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BrowserCookie"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ProblemResponse
    }
  },
  serializer
};

const addCookiesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "profiles/{guid}/cookies",
  urlParameters: [
    Parameters.guid
  ],
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: {
      serializedName: "body",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Composite",
            className: "CookieRequest"
          }
        }
      }
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BrowserCookie"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ProblemResponse
    }
  },
  serializer
};

const deleteCookiesOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "profiles/{guid}/cookies",
  urlParameters: [
    Parameters.guid
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ProblemResponse
    }
  },
  serializer
};

const healthcheckOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "general/healthcheck",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ProblemResponse
    }
  },
  serializer
};

const getUserInfoOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "general/user-info",
  responses: {
    200: {
      bodyMapper: Mappers.UserInfoResponse
    },
    default: {
      bodyMapper: Mappers.ProblemResponse
    }
  },
  serializer
};

const terminateApplicationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "general/terminate",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ProblemResponse
    }
  },
  serializer
};

const listProfilesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "profiles",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProfilePreview"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ProblemResponse
    }
  },
  serializer
};

const createProfileOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "profiles/new",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.CreateProfileRequest
  },
  responses: {
    200: {
      bodyMapper: Mappers.ProfileResponse
    },
    default: {
      bodyMapper: Mappers.ProblemResponse
    }
  },
  serializer
};

const updateProfileOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "profiles/{guid}",
  urlParameters: [
    Parameters.guid
  ],
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.UpdateProfileRequest
  },
  responses: {
    200: {
      bodyMapper: Mappers.ProfileResponse
    },
    default: {
      bodyMapper: Mappers.ProblemResponse
    }
  },
  serializer
};

const readProfileOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "profiles/{guid}",
  urlParameters: [
    Parameters.guid
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProfileResponse
    },
    default: {
      bodyMapper: Mappers.ProblemResponse
    }
  },
  serializer
};

const deleteProfileOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "profiles/{guid}",
  urlParameters: [
    Parameters.guid
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ProblemResponse
    }
  },
  serializer
};

const getProfileStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "profiles/{guid}/status",
  urlParameters: [
    Parameters.guid
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StatusResponse
    },
    default: {
      bodyMapper: Mappers.ProblemResponse
    }
  },
  serializer
};

const startProfileOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "profiles/{guid}/start",
  urlParameters: [
    Parameters.guid
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StatusResponse
    },
    default: {
      bodyMapper: Mappers.ProblemResponse
    }
  },
  serializer
};

const stopProfileOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "profiles/{guid}/stop",
  urlParameters: [
    Parameters.guid
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StatusResponse
    },
    default: {
      bodyMapper: Mappers.ProblemResponse
    }
  },
  serializer
};

const saveProfileOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "profiles/{guid}/save",
  urlParameters: [
    Parameters.guid
  ],
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.SaveProfileRequest
  },
  responses: {
    200: {
      bodyMapper: Mappers.ProfileResponse
    },
    default: {
      bodyMapper: Mappers.ProblemResponse
    }
  },
  serializer
};

const loadProfileOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "profiles/load",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.LoadProfileRequest
  },
  responses: {
    200: {
      bodyMapper: Mappers.ProfileResponse
    },
    default: {
      bodyMapper: Mappers.ProblemResponse
    }
  },
  serializer
};

export {
  LocalApiClient,
  LocalApiClientContext,
  Models as LocalApiModels,
  Mappers as LocalApiMappers
};
